worker_processes  auto;
worker_rlimit_nofile 8192;

events {
  worker_connections  8000;
}

http {
  # For logging purpose
  # access_log /etc/nginx/access_logs.log
  # error_log /etc/nginx/error_logs.log

  # Contain all the mapping of file extensions with MIME types (Multipurpose Internet Mail Extensions) 
  include       mime.types;

  # Enable to use sendfile() system call for serving static files (js, css, img, etc)
  # Efficient static file serving
  sendfile        on;

  # Define how long connection will open after finish one req (avoid handshake connection again for single client)
  keepalive_timeout 40s;       # Keep connections alive for 40 seconds
  keepalive_requests 1000;     # Max number of requests per connection

  # Upstream contain the servers point to the variable (round robin)
  # In case of nginx running on container and backend running local then use (host.docker.internal)
  upstream backend-dash {
    server backend-dash-132990579191.asia-south1.run.app:443;
  }

  server {
    #  Use server name in case SSL Cert for External traffic directly came to Machine(Not recommended)
    #  Use ALB to route traffic and manage the SSL
    listen 80;
    # listen 443 ssl;
    # server_name _;

    # ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    # ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

    # ============= Serving the Frontend =============
    root /opt/github_repo/revplus/dist;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    # Optional: Basic security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    # =================================================

    location /socket.io/ {
      proxy_pass https://backend-dash/socket.io/;

      # Proxy version for socket connection
      proxy_http_version 1.1;

      # Upgrade Headers
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";

      # Crucial for Cloud Run: Set the correct Host header
      proxy_set_header Host backend-dash-132990579191.asia-south1.run.app;

      # Force cookie forwarding
      proxy_set_header Cookie $http_cookie;
      proxy_set_header Authorization $http_authorization;

      # Headers for caching
      add_header Cache-Control no-cache;
      add_header Cache-Control no-store;

      # Keep these proxy_ssl_ lines for SSL/TLS to the backend
      proxy_ssl_server_name on;
      proxy_ssl_name backend-dash-132990579191.asia-south1.run.app;

      error_log /etc/nginx/debug.log debug;
    }

    location /api/dashboard {
      # Pass the request to the upstream group
      proxy_pass https://backend-dash/backend/api/v1/platform;

      # Correct Host header for Cloud Run. This is crucial for Cloud Run's routing.
      proxy_set_header Host backend-dash-132990579191.asia-south1.run.app;

      # Force cookie forwarding
      proxy_set_header Cookie $http_cookie;
      proxy_set_header Authorization $http_authorization;

      # Headers for caching
      add_header Cache-Control no-cache;
      add_header Cache-Control no-store;

      # Keep these proxy_ssl_ lines for SSL/TLS to the backend
      proxy_ssl_server_name on;
      proxy_ssl_name backend-dash-132990579191.asia-south1.run.app;

      error_log /etc/nginx/debug.log debug;
    }

  }
}